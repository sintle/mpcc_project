{
	"ident": "com.minphtis.mpcc",
	"version": 1,
	"features": [
		"en_US.language"
	],
	"repo": {
		"en_US.language": [
			{
				"from": "local",
				"value": {
					"data": [
						{"key": "lang.name", "value": "English (United States)"},
						{"key": "error.call.tooLessArgs", "value": "At least [Expected] parameters need to be provided, but only [Current] were found."},
						{"key": "error.call.incorrectArgs", "value": "Need to provide [Expected] parameters, but found [Current]."},
						{"key": "error.call.nativeFormat", "value": "The native code has reported a format error."},
						{"key": "error.call.nativeUnhandled", "value": "The native code has reported an unhandled error."},
						{"key": "error.ast.program", "value": "Incompatible format! Please check if the program is designed for the MPCC Project and if the version is correct."},
						{"key": "error.evaluator.moreExpect", "value": "Expected to capture the Array type and use it for parameter expansion, but actually capture the [Type] type."},
						{"key": "error.evaluator.constructorType", "value": "The constructor must be of type Function."},
						{"key": "error.ast.functionInner", "value": "The Inner property of the Function type must be a Scope expression."},
						{"key": "error.call.notExecutable", "value": "[Subject] is not a valid function or native function."},
						{"key": "error.call.notExecutable1", "value": "Not a valid function or native function."},
						{"key": "error.evaluator.nullAssignUnexpected", "value": "Unexpected assignment to Null type variables."},
						{"key": "error.call.xcrementArgs", "value": "Increment or Decrement functions cannot have parameters."},
						{"key": "error.call.nativeFormat1", "value": "The native code contained in [Subject] has reported a format error."},
						{"key": "error.call.nativeUnhandled1", "value": "The native code contained in [Subject] has reported an unhandled error."},
						{"key": "error.call.indexArgs", "value": "The Index function must contain exactly one parameter and cannot use parameter expansion"},
						{"key": "error.index.stringAt", "value": "The String type Index operation expects to obtain an index between [[Begin], [End]], but actually obtains [Index]."},
						{"key": "error.index.type", "value": "The Index operation only accepts Integer types or Array types that contain only Integer types as input."},
						{"key": "error.index.incorrectRange.string", "value": "When implementing the Index operation on a String type, a negative width interval was encountered: [[Start], [End]]."},
						{"key": "error.index.stringAt1", "value": "The String type Index operation expects to obtain indices between [[Begin], [End]], but actually obtains [[I0], [I1]]."},
						{"key": "error.index.arrayAt", "value": "The Array type Index operation expects to obtain an index between [[Begin], [End]], but actually obtains [Index]."},
						{"key": "error.index.incorrectRange.array", "value": "When implementing the Index operation on an Array type, a negative width interval was encountered: [[Start], [End]]."},
						{"key": "error.index.arrayAt1", "value": "The Array type Index operation expects to obtain indices between [[Begin], [End]], but actually obtains [[I0], [I1]]."},
						{"key": "error.index.typeSupport", "value": "The Index operation only supports the use of Array and String types."},
						{"key": "error.infix.notIdentifier", "value": "Members must be described through an identifier expression."},
						{"key": "error.infix.noSuchMember", "value": "The member is not found."},
						{"key": "error.infix.memberPrivate", "value": "Private members of a class cannot be accessed externally."},
						{"key": "error.infix.noSuchEnumerate", "value": "The enumerate value is not found."},
						{"key": "error.call.prefixArgs", "value": "The Prefix function cannot use parameters."},
						{"key": "error.stat.type", "value": "The Statement expression contains unexpected content."},
						{"key": "error.value.type", "value": "Unknown value type."},
						{"key": "error.statement.type", "value": "Unknown statement type."},
						{"key": "error.call.infixArgs", "value": "The Infix function must contain exactly one parameter and cannot use patameter expansion."},
						{"key": "error.call.argData", "value": "Parameter data error."},
						{"key": "error.unhandled", "value": "Unhandled error in [Reason]"},
						{"key": "error.program.init", "value": "Program initialization error."},
						{"key": "error.unexpected_node_type", "value": "Unexpected node type."},
						{"key": "error.argsize", "value": "Wrong number of parameter passes: [How]"},
						{"key": "error.iconstructor", "value": "The constructor does not exist."},
						{"key": "error.datatype", "value": "Data type error: [How]"},
						{"key": "error.datavalue", "value": "Unsupported data value."},
						{"key": "error.notfound", "value": "[Subject] not found"},
						{"key": "error.moretype", "value": "Incompatible parameter expander type: [What]"},
						{"key": "error.assignconstant", "value": "Attempting to assign a constant: [What]"},
						{"key": "error.assignBetweenTypes", "value": "Prohibit assigning variables of type [T1] to values of type [T2]."},
						{"key": "error.inherit", "value": "Cannot inherit a class [Name] that does not already exist."},
						{"key": "error.leveltype", "value": "Abnormal <Instance>.__level__"},
						{"key": "error.xcrementType", "value": "Unsupported types affected by Increment/Decision."},
						{"key": "error.alreadyExists", "value": "The variable [Name] already exists."},
						{"key": "error.forElement", "value": "For loop variable selector error: [How]"},
						{"key": "error.xcrement", "value": "Increase/Decision error: [How]"},
						{"key": "error.outOfRange", "value": "Out of range: [What]"},
						{"key": "error.invalid", "value": "Deprecated/Does Not Exist: [What]"},
						{"key": "error.memberError", "value": "An error occurred while searching for a member: [How]"},
						{"key": "error.infix", "value": "The incorrect Infix [What] applies between [Left] and [Right]."},
						{"key": "error.prefix", "value": "The incorrect Prefix [What] applies to [Type]."},
						{"key": "error.scopeLeft", "value": "The Scope expression must start with a left parenthesis."},
						{"key": "error.forStat", "value": "The format of a regular For expression is \"for var(range) statement\"."},
						{"key": "error.functionNoArgs", "value": "The Function expression must contain a parameter list."},
						{"key": "error.moreName", "value": "The indefinite parameter must contain a name."},
						{"key": "error.argSplit", "value": "The parameter list should be separated by ','."},
						{"key": "error.moreArgLast", "value": "The parameter to be expanded must be the last one."},
						{"key": "error.argNoName", "value": "The parameter must contain a name."},
						{"key": "error.ternaryFormat", "value": "The format of the ternary operator is \"cond ? yes : no\"."},
						{"key": "error.classNoName", "value": "The class must contain a name."},
						{"key": "error.classInherit", "value": "Class inheritance must include the name of a parent class."},
						{"key": "error.enumName", "value": "The enumerate must contain a name."},
						{"key": "error.enumValue", "value": "The enumerate must contain a list of values."},
						{"key": "error.enumValueName", "value": "The enumerate value must contain a name."},
						{"key": "error.enumSplit", "value": "The enumerate values must be separated by ','."},
						{"key": "error.constructorArgs", "value": "The constructor must contain a parameter list."},
						{"key": "error.constructorMore", "value": "Constructors cannot use parameter expansion."},
						{"key": "error.variableNoName", "value": "The variable must contain a name."},
						{"key": "error.arraySplit", "value": "List values must be separated by ','."},
						{"key": "error.removeNothing", "value": "The Remove expression must contain a target."},
						{"key": "error.importPath", "value": "The Import expression must contain a definite path."},
						{"key": "error.groupNoEnd", "value": "The Group expression must contain an ending."},
						{"key": "error.indexNoEnd", "value": "The Index expression must contain an ending."},
						{"key": "error.noOpPre", "value": "No valid Operator or Prefix was found."},
						{"key": "error.unknownPre", "value": "Invalid prefix expression."},
						{"key": "error.unknownIn", "value": "Invalid infix expression."},
						{"key": "error.unhandledParse", "value": "An unknown error occurred during parsing. This may be a bug."},
						{"key": "error.endIncorrectly", "value": "Something ended in the wrong way."},
						{"key": "error.format", "value": "Format error: [Information]"},
						{"key": "error.numberType", "value": "Unknown number type."},
						{"key": "error.unknownInfix", "value": "Unknown Infix operator used"},
						{"key": "error.unknownPrefix", "value": "Unknown Prefix operator used"},
						{"key": "error.unknownAssign", "value": "Unknown Assign operator used"},
						{"key": "error.importError", "value": "Import error - Please check if the target file or its preprocessed version exists."}
					]
				}
			}
		]
	}
}