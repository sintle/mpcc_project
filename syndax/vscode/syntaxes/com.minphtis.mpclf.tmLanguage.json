{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "MPC",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#semicolon"
		},
		{
			"include": "#classdef"
		},
		{
			"include": "#enumdef"
		},
		{
			"include": "#definition"
		},
		{
			"include": "#constructordef"
		},
		{
			"include": "#destructordef"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#stringssingle"
		},
		{
			"include": "#number"
		},
		{
			"match": "\\b(this|true|false|null)\\b",
			"name": "constant.language.$1.com.minphtis.mpclf"
		},
		{
			"include": "#functiondef"
		},
		{
			"include": "#functioncall"
		},
		{
			"include": "#array"
		},
		{
			"include": "#fwk"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#commentline"
		},
		{
			"include": "#commentblock"
		},
		{
			"include": "#commentrunas"
		},
		{
			"include": "#comma"
		},
		{
			"include": "#builtins"
		},
		{
			"include": "#identifier"
		}
	],
	"repository": {
		"builtins": {
			"match": "\\b(?:(print|println|getline|getint|getfloat|getbool|getchar|getstring|termformat|fopen|fisok|fisfailed|fgetline|fgetint|fgetfloat|fgetbool|fgetstring|fgetchar|fprint|fprintln|fclose|load|is_linux|is_windows|is_apple|is_unix|is_android|posix_supported|is_debug|mpcc_version|typestr|construct_next|dynamic_let|dynamic_remove|dynamic_access|evulate_up|nisolated|typecheck|cltcheck|str|len|push|max|min|make_copy|range|oncecheck|map|flat|flat_map|deduplicate|join|take)|(open_mode|Object))\\b",
			"captures": {
				"1": {
					"name": "support.function.$1.com.minphtis.mpclf"
				},
				"2": {
					"name": "support.class.$1.com.minphtis.mpclf"
				}
			}
		},
		"keywords": {
			"match": "\\b(for\\b|while\\b|return\\b|if\\b|else\\b|dowhile\\b|delete\\b|import\\b|(?:__spec_constructor(?:\\d+)_(?:\\d+)\\b)|(?:__spec_destructor(?:\\d+)\\b)|__level__\\b|__indexes__\\b|__construct__\\b|(?:operator(?:\\+=|-=|\\*=|\\/=|%=|<<=|>>=|\\^=|&=|\\|=|\\+|-|\\*|\\/|%|>>|<<|\\|\\||\\||&&|&|\\^|\\[\\]|\\(\\)|>=|<=|==|!=|<|>|=))|(?:prefix(?:!|-|\\+|~)))",
			"name": "keyword.control.$1.com.minphtis.mpclf"
		},
		"definition": {
			"match": "\\b(const)?(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*(let|var|global|private|public)\\b",
			"captures": {
				"1": {
					"name": "storage.modifier.final.com.minphtis.mpclf"
				},
				"2": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"3": {
					"name": "storage.type.$3.com.minphtis.mpclf"
				}
			}
		},
		"strings": {
			"name": "string.quoted.double.com.minphtis.mpclf",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.com.minphtis.mpclf",
					"match": "\\\\."
				}
			]
		},
		"stringssingle": {
			"name": "string.quoted.single.com.minphtis.mpclf",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.com.minphtis.mpclf",
					"match": "\\\\."
				}
			]
		},
		"number": {
			"match": "(0x[\\da-fA-F]+)|(0[0-7]+)|(0b[01]+)|(0|(?:[1-9]\\d*)|(?:\\d*\\.\\d+))",
			"captures": {
				"1": {
					"name": "constant.numeric.hex.com.minphtis.mpclf"
				},
				"2": {
					"name": "constant.numeric.oct.com.minphtis.mpclf"
				},
				"3": {
					"name": "constant.numeric.bin.com.minphtis.mpclf"
				},
				"4": {
					"name": "constant.numeric.dec.com.minphtis.mpclf"
				}
			}
		},
		"commentblock": {
			"name": "comment.block.com.minphtis.mpclf",
			"begin": "\\s*+(\\/\\*)",
			"end": "\\*\\/",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.comment.begin.com.minphtis.mpclf"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.comment.end.com.minphtis.mpclf"
				}
			}
		},
		"commentline": {
			"name": "comment.line.double-slash.com.minphtis.mpclf",
			"begin": "\\s*(\\/\\/)",
			"end": "\\n",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.comment.com.minphtis.mpclf"
				}
			},
			"endCaptures": {}
		},
		"invalid-comment-end": {
			"match": "\\*\\/",
			"name": "invalid.illegal.unexpected.punctuation.definition.comment.end.com.minphtis.mpclf"
		},
		"commentrunas": {
			"name": "comment.line.number-sign",
			"begin": "#!",
			"end": "\\n",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.comment.com.minphtis.mpclf"
				}
			},
			"endCaptures": {}
		},
		"functioncall": {
			"begin": "([a-zA-Z_]\\w*)(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*(\\()",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.call.com.minphtis.mpclf"
				},
				"2": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"3": {
					"name": "punctuation.section.arguments.begin.bracket.round.function.call.com.minphtis.mpclf"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.section.arguments.end.bracket.round.function.call.com.minphtis.mpclf"
				}
			},
			"patterns": [
				{
					"include": "#keywords"
				},
				{
					"include": "#builtins"
				},
				{
					"include": "#semicolon"
				},
				{
					"include": "#classdef"
				},
				{
					"include": "#enumdef"
				},
				{
					"include": "#definition"
				},
				{
					"include": "#constructordef"
				},
				{
					"include": "#destructordef"
				},
				{
					"include": "#commentline"
				},
				{
					"include": "#commentblock"
				},
				{
					"include": "#commentrunas"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#stringssingle"
				},
				{
					"include": "#number"
				},
				{
					"match": "\\b(this|true|false|null)\\b",
					"name": "constant.language.$1.com.minphtis.mpclf"
				},
				{
					"include": "#functiondef"
				},
				{
					"include": "#functioncall"
				},
				{
					"include": "#array"
				},
				{
					"include": "#fwk"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#arglist"
				},
				{
					"include": "#identifier"
				},
				{
					"include": "#comma"
				}
			]
		},
		"semicolon": {
			"match": ";",
			"name": "punctuation.terminator.statement.com.minphtis.mpclf"
		},
		"comma": {
			"match": ",",
			"name": "punctuation.separator.delimiter.comma.com.minphtis.mpclf"
		},
		"functiondef": {
			"begin": "(\\bfunction|\\$)(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*(\\()(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*(?:(?:([a-zA-Z_]\\w*)(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*(?:,(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*([a-zA-Z_]\\w*)(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*)*(?:,(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*(\\.{3})([a-zA-Z_]\\w*)(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*)?)|(?:(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*(\\.{3})([a-zA-Z_]\\w*)(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*)|(?:(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*))?(\\))(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*(\\{)",
			"end": "(\\})",
			"beginCaptures": {
				"1": {
					"name": "storage.type.com.minphtis.mpclf"
				},
				"2": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"3": {
					"name": "punctuation.section.arguments.begin.bracket.round.com.minphtis.mpclf"
				},
				"4": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"5": {
					"name": "variable.parameter.com.minphtis.mpclf"
				},
				"6": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"7": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"8": {
					"name": "variable.parameter.com.minphtis.mpclf"
				},
				"9": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"10": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"11": {
					"name": "keyword.operator.expend.com.minphtis.mpclf"
				},
				"12": {
					"name": "variable.parameter.com.minphtis.mpclf"
				},
				"13": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"14": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"15": {
					"name": "keyword.operator.expend.com.minphtis.mpclf"
				},
				"16": {
					"name": "variable.parameter.com.minphtis.mpclf"
				},
				"17": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"18": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"19": {
					"name": "punctuation.section.arguments.end.bracket.round.com.minphtis.mpclf"
				},
				"20": {
					"name": "comment.block.com.minphtis.mpclf"
				}
			},
			"endCaptures": {},
			"name": "meta.function.definition.com.minphtis.mpclf",
			"patterns": [
				{
					"include": "#keywords"
				},
				{
					"include": "#builtins"
				},
				{
					"include": "#semicolon"
				},
				{
					"include": "#classdef"
				},
				{
					"include": "#enumdef"
				},
				{
					"include": "#definition"
				},
				{
					"include": "#constructordef"
				},
				{
					"include": "#destructordef"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#stringssingle"
				},
				{
					"include": "#number"
				},
				{
					"match": "\\b(this|true|false|null)\\b",
					"name": "constant.language.$1.com.minphtis.mpclf"
				},
				{
					"include": "#functiondef"
				},
				{
					"include": "#functioncall"
				},
				{
					"include": "#array"
				},
				{
					"include": "#fwk"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#commentline"
				},
				{
					"include": "#commentblock"
				},
				{
					"include": "#commentrunas"
				},
				{
					"include": "#comma"
				},
				{
					"include": "#identifier"
				}
			]
		},
		"destructordef": {
			"begin": "\\b(destructor)(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*\\{",
			"end": "\\}",
			"name": "meta.function.definition.special.member.destructor.com.minphtis.mpclf",
			"beginCaptures": {
				"1": {
					"name": "storage.type.destructor.com.minphtis.mpclf"
				}
			},
			"patterns": [
				{
					"include": "#keywords"
				},
				{
					"include": "#builtins"
				},
				{
					"include": "#semicolon"
				},
				{
					"include": "#classdef"
				},
				{
					"include": "#enumdef"
				},
				{
					"include": "#definition"
				},
				{
					"include": "#constructordef"
				},
				{
					"include": "#destructordef"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#stringssingle"
				},
				{
					"include": "#number"
				},
				{
					"match": "\\b(this|true|false|null)\\b",
					"name": "constant.language.$1.com.minphtis.mpclf"
				},
				{
					"include": "#functiondef"
				},
				{
					"include": "#functioncall"
				},
				{
					"include": "#array"
				},
				{
					"include": "#fwk"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#commentline"
				},
				{
					"include": "#commentblock"
				},
				{
					"include": "#commentrunas"
				},
				{
					"include": "#comma"
				},
				{
					"include": "#identifier"
				}
			]
		},
		"constructordef": {
			"begin": "\\b(constructor)(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*(\\()(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*(?:([a-zA-Z_]\\w*)(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*(?:,(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*([a-zA-Z_]\\w*)(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*)*)?(\\))(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*(\\{)",
			"end": "(\\})",
			"beginCaptures": {
				"1": {
					"name": "storage.type.constructor.com.minphtis.mpclf"
				},
				"2": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"3": {
					"name": "punctuation.section.arguments.begin.bracket.round.com.minphtis.mpclf"
				},
				"4": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"5": {
					"name": "variable.parameter.com.minphtis.mpclf"
				},
				"6": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"7": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"8": {
					"name": "variable.parameter.com.minphtis.mpclf"
				},
				"9": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"10": {
					"name": "punctuation.section.arguments.end.bracket.round.com.minphtis.mpclf"
				},
				"11": {
					"name": "comment.block.com.minphtis.mpclf"
				}
			},
			"endCaptures": {},
			"name": "meta.function.definition.special.member.constructor.com.minphtis.mpclf",
			"patterns": [
				{
					"include": "#keywords"
				},
				{
					"include": "#builtins"
				},
				{
					"include": "#semicolon"
				},
				{
					"include": "#classdef"
				},
				{
					"include": "#enumdef"
				},
				{
					"include": "#definition"
				},
				{
					"include": "#constructordef"
				},
				{
					"include": "#destructordef"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#stringssingle"
				},
				{
					"include": "#number"
				},
				{
					"match": "\\b(this|true|false|null)\\b",
					"name": "constant.language.$1.com.minphtis.mpclf"
				},
				{
					"include": "#functiondef"
				},
				{
					"include": "#functioncall"
				},
				{
					"include": "#array"
				},
				{
					"include": "#fwk"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#commentline"
				},
				{
					"include": "#commentblock"
				},
				{
					"include": "#commentrunas"
				},
				{
					"include": "#comma"
				},
				{
					"include": "#identifier"
				}
			]
		},
		"classdef": {
			"begin": "\\b(class)(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*([a-zA-Z_]\\w*)(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*(?:(:)(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*([a-zA-Z_]\\w*)(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*)?(\\{)",
			"end": "(?:\\})",
			"beginCaptures": {
				"1": {
					"name": "storage.type.class.com.minphtis.mpclf"
				},
				"2": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"3": {
					"name": "entity.name.type.class.com.minphtis.mpclf"
				},
				"4": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"5": {
					"name": "keyword.operator.inheritance.com.minphtis.mpclf"
				},
				"6": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"7": {
					"name": "entity.name.type.class.inheritance.com.minphtis.mpclf"
				},
				"8": {
					"name": "comment.block.com.minphtis.mpclf"
				}
			},
			"endCaptures": {},
			"name": "meta.block.class.com.minphtis.mpclf",
			"patterns": [
				{
					"include": "#keywords"
				},
				{
					"include": "#builtins"
				},
				{
					"include": "#semicolon"
				},
				{
					"include": "#classdef"
				},
				{
					"include": "#enumdef"
				},
				{
					"include": "#definition"
				},
				{
					"include": "#constructordef"
				},
				{
					"include": "#destructordef"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#stringssingle"
				},
				{
					"include": "#number"
				},
				{
					"match": "\\b(this|true|false|null)\\b",
					"name": "constant.language.$1.com.minphtis.mpclf"
				},
				{
					"include": "#functiondef"
				},
				{
					"include": "#functioncall"
				},
				{
					"include": "#array"
				},
				{
					"include": "#fwk"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#commentline"
				},
				{
					"include": "#commentblock"
				},
				{
					"include": "#commentrunas"
				},
				{
					"include": "#comma"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#stringssingle"
				},
				{
					"include": "#number"
				},
				{
					"match": "\\b(this|true|false|null)\\b",
					"name": "constant.language.$1.com.minphtis.mpclf"
				},
				{
					"include": "#functiondef"
				},
				{
					"include": "#functioncall"
				},
				{
					"include": "#array"
				},
				{
					"include": "#fwk"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#arglist"
				},
				{
					"include": "#identifier"
				},
				{
					"include": "#comma"
				},
				{
					"include": "#identifier"
				}
			]
		},
		"enumdef": {
			"match": "(\\benum)(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*([a-zA-Z_]\\w*)(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*(\\{)(?:(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*([a-zA-Z_]\\w*)(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*(?:,(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*([a-zA-Z_]\\w*)(\\s*\\/\\*(?:[^\\*]|\\*(?!\\/)|[\\r\\n])*\\*\\/)*\\s*)*)?(\\})",
			"captures": {
				"1": {
					"name": "storage.type.enum.com.minphtis.mpclf"
				},
				"2": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"3": {
					"name": "entity.name.type.enum.com.minphtis.mpclf"
				},
				"4": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"6": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"7": {
					"name": "entity.name.enum.type.key.$7.com.minphtis.mpclf"
				},
				"8": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"9": {
					"name": "comment.block.com.minphtis.mpclf"
				},
				"10": {
					"name": "entity.name.enum.key.$10.com.minphtis.mpclf"
				},
				"11": {
					"name": "comment.block.com.minphtis.mpclf"
				}
			},
			"name": "meta.block.enum.com.minphtis.mpclf"
		},
		"local": {
			"begin": "\\{",
			"end": "\\}",
			"patterns": [
				{
					"include": "#keywords"
				},
				{
					"include": "#builtins"
				},
				{
					"include": "#semicolon"
				},
				{
					"include": "#classdef"
				},
				{
					"include": "#enumdef"
				},
				{
					"include": "#definition"
				},
				{
					"include": "#constructordef"
				},
				{
					"include": "#destructordef"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#stringssingle"
				},
				{
					"include": "#number"
				},
				{
					"match": "\\b(this|true|false|null)\\b",
					"name": "constant.language.$1.com.minphtis.mpclf"
				},
				{
					"include": "#functiondef"
				},
				{
					"include": "#functioncall"
				},
				{
					"include": "#array"
				},
				{
					"include": "#fwk"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#commentline"
				},
				{
					"include": "#commentblock"
				},
				{
					"include": "#commentrunas"
				},
				{
					"include": "#comma"
				},
				{
					"include": "#identifier"
				}
			]
		},
		"identifier": {
			"match": "\\b[a-zA-Z_]\\w*\\b",
			"name": "variable.name.com.minphtis.mpclf"
		},
		"fwk": {
			"begin": "\\(",
			"end": "\\)",
			"patterns": [
				{
					"include": "#keywords"
				},
				{
					"include": "#builtins"
				},
				{
					"include": "#semicolon"
				},
				{
					"include": "#classdef"
				},
				{
					"include": "#enumdef"
				},
				{
					"include": "#definition"
				},
				{
					"include": "#constructordef"
				},
				{
					"include": "#destructordef"
				},
				{
					"include": "#commentline"
				},
				{
					"include": "#commentblock"
				},
				{
					"include": "#commentrunas"
				},
				{
					"include": "#comma"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#stringssingle"
				},
				{
					"include": "#number"
				},
				{
					"match": "\\b(this|true|false|null)\\b",
					"name": "constant.language.$1.com.minphtis.mpclf"
				},
				{
					"include": "#functiondef"
				},
				{
					"include": "#functioncall"
				},
				{
					"include": "#array"
				},
				{
					"include": "$self"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#commentline"
				},
				{
					"include": "#commentblock"
				},
				{
					"include": "#commentrunas"
				},
				{
					"include": "#comma"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#stringssingle"
				},
				{
					"include": "#number"
				},
				{
					"match": "\\b(this|true|false|null)\\b",
					"name": "constant.language.$1.com.minphtis.mpclf"
				},
				{
					"include": "#functiondef"
				},
				{
					"include": "#functioncall"
				},
				{
					"include": "#array"
				},
				{
					"include": "#fwk"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#identifier"
				}
			]
		},
		"array": {
			"begin": "\\[",
			"end": "\\]",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.begin.bracket.square.array.type.com.minphtis.mpclf"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.end.bracket.square.array.type.com.minphtis.mpclf"
				}
			},
			"name": "meta.bracket.square.array.com.minphtis.mpclf",
			"patterns": [
				{
					"include": "#keywords"
				},
				{
					"include": "#builtins"
				},
				{
					"include": "#semicolon"
				},
				{
					"include": "#classdef"
				},
				{
					"include": "#enumdef"
				},
				{
					"include": "#definition"
				},
				{
					"include": "#constructordef"
				},
				{
					"include": "#destructordef"
				},
				{
					"include": "#commentline"
				},
				{
					"include": "#commentblock"
				},
				{
					"include": "#commentrunas"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#stringssingle"
				},
				{
					"include": "#number"
				},
				{
					"match": "\\b(this|true|false|null)\\b",
					"name": "constant.language.$1.com.minphtis.mpclf"
				},
				{
					"include": "#functiondef"
				},
				{
					"include": "#functioncall"
				},
				{
					"include": "#array"
				},
				{
					"include": "#fwk"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#identifier"
				},
				{
					"include": "#comma"
				}
			]
		},
		"operators": {
			"match": "(\\.(?!\\d))|::|\\+|-|\\*|\\/(?!\\/|\\*)|%|\\||&|\\^|~|--|\\+\\+|&&|\\|\\||!|>>|<<|\\+=|-=|\\*=|\\/=|%=|&=|\\^=|<<=|>>=|\\|=|!=|<=|>=|==|<|>|=|\\?|:",
			"name": "keyword.operator.com.minphtis.mpclf",
			"captures": {
				"1": {
					"patterns": [
						{
							"match": "(?:\\.|::)(?!\\d)",
							"name": "keyword.operator.access.com.minphtis.mpclf"
						},
						{
							"match": "\\+|-|\\*|\\/|%",
							"name": "keyword.operator.arithmetic.com.minphtis.mpclf"
						},
						{
							"match": "\\||&|\\^|~",
							"name": "keyword.operator.bitwise.com.minphtis.mpclf"
						},
						{
							"match": "--",
							"name": "keyword.operator.decrement.com.minphtis.mpclf"
						},
						{
							"match": "\\+\\+",
							"name": "keyword.operator.increment.com.minphtis.mpclf"
						},
						{
							"match": "&&|\\|\\||!",
							"name": "keyword.operator.logical.com.minphtis.mpclf"
						},
						{
							"match": ">>|<<",
							"name": "keyword.operator.bitwise.shift.com.minphtis.mpclf"
						},
						{
							"match": "\\+=|-=|\\*=|\\/=|%=",
							"name": "keyword.operator.assignment.compound.com.minphtis.mpclf"
						},
						{
							"match": "&=|\\^=|<<=|>>=|\\|=",
							"name": "keyword.operator.assignment.compound.bitwise.com.minphtis.mpclf"
						},
						{
							"match": "!=|<=|>=|==|<|>",
							"name": "keyword.operator.comparison.com.minphtis.mpclf"
						},
						{
							"match": "=",
							"name": "keyword.operator.assignment.com.minphtis.mpclf"
						},
						{
							"match": "\\?|:",
							"name": "keyword.operator.ternary.com.minphtis.mpclf"
						}
					]
				}
			}
		}
	},
	"scopeName": "source.mpc"
}